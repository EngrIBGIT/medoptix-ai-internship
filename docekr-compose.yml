version: "3.9"

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medoptix-api
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - DB_HOST=db
    volumes:
      - ./models:/app/models
      - ./reports:/app/reports
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - medoptix-network

  db:
    image: postgres:16-alpine
    container_name: medoptix-db
    environment:
      POSTGRES_USER: ${DB_USER:-medoptix}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-medoptix_password}
      POSTGRES_DB: ${DB_NAME:-medoptix_db}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-medoptix} -d ${DB_NAME:-medoptix_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medoptix-network

  redis:
    image: redis:7-alpine
    container_name: medoptix-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medoptix-network

  nginx:
    image: nginx:alpine
    container_name: medoptix-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - medoptix-network

  prometheus:
    image: prom/prometheus:latest
    container_name: medoptix-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - medoptix-network

  grafana:
    image: grafana/grafana:latest
    container_name: medoptix-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - medoptix-network

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local  
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  medoptix-network:
    driver: bridge